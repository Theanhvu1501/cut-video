import fs from "fs"; // ƒê·ªçc file
import pLimit from "p-limit"; // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng video t·∫£i song song
import path from "path";
import sharp from "sharp";
import youtubedl from "youtube-dl-exec"; // T·∫£i video t·ª´ YouTube
import ffmpeg from "@ffmpeg-installer/ffmpeg";
import ffmpegFluent from "fluent-ffmpeg";

// C·∫•u h√¨nh FFmpeg cho fluent-ffmpeg
ffmpegFluent.setFfmpegPath(ffmpeg.path);
// H√†m t·∫£i video YouTube v·ªõi ƒë·ªãnh d·∫°ng MP4
const downloadVideo = async (url, outputPath) => {
  try {
    const output = path.join(outputPath, "%(title)s.%(ext)s");
    await youtubedl(url, {
      output: output,
      format: "bestvideo[height=720]+bestaudio[ext=m4a]/mp4",
      mergeOutputFormat: "mp4",
      writeThumbnail: true,
      convertThumbnails: "jpg",
    });
    console.log(`T·∫£i video t·ª´ ${url} th√†nh c√¥ng d∆∞·ªõi ƒë·ªãnh d·∫°ng MP4!`);
  } catch (error) {
    console.error(`L·ªói khi t·∫£i video t·ª´ ${url}:`, error.message);
  }
};

// H√†m t·∫£i nhi·ªÅu video t·ª´ danh s√°ch URL
const downloadVideos = async (filePath, savePath) => {
  if (!fs.existsSync(savePath)) fs.mkdirSync(savePath); // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥

  // ƒê·ªçc file ch·ª©a danh s√°ch URL
  const urls = fs.readFileSync(filePath, "utf-8").split("\n").filter(Boolean); // T√°ch t·ª´ng d√≤ng v√† lo·∫°i b·ªè d√≤ng tr·ªëng

  const limit = pLimit(3); // Gi·ªõi h·∫°n t·ªëi ƒëa 3 video ch·∫°y song song

  // L·∫∑p qua t·ª´ng URL v√† g·ªçi h√†m t·∫£i video
  const downloadPromises = urls.map((url) =>
    limit(() => downloadVideo(url, savePath))
  );

  await Promise.all(downloadPromises); // Ch·∫°y t·∫•t c·∫£ c√°c Promise song song v·ªõi gi·ªõi h·∫°n
};


const convertCodec = async (directory) => {
  const files = fs.readdirSync(directory);

  for (const file of files) {
    const filePath = path.join(directory, file);
    const ext = path.extname(file).toLowerCase();

    if (ext === ".mp4") {
      const outputFilePath = path.join(directory, "converted_" + file);

      console.log(`üîÑ ƒêang chuy·ªÉn ƒë·ªïi codec: ${file} -> ${outputFilePath}`);

      await new Promise((resolve, reject) => {
        ffmpegFluent(filePath)
          .videoCodec("libx264")
          .audioCodec("aac")
          .audioBitrate("128k")
          .outputOptions("-preset fast") // Gi·∫£m th·ªùi gian encode
          .outputOptions("-crf 23") // Ch·∫•t l∆∞·ª£ng t·ªët, dung l∆∞·ª£ng t·ªëi ∆∞u
          .on("end", () => {
            console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi codec: ${file}`);
            fs.unlinkSync(filePath); // X√≥a file g·ªëc sau khi convert
            fs.renameSync(outputFilePath, filePath); // ƒê·ªïi l·∫°i t√™n file th√†nh g·ªëc
            resolve();
          })
          .on("error", (err) => {
            console.error(`‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi ${file}: ${err.message}`);
            reject(err);
          })
          .save(outputFilePath);
      });
    }
  }
};

async function processImagesFromFolder(inputDir, overlayDir, outputBaseDir, overlaySize) {
  try {
    if (!fs.existsSync(outputBaseDir)) {
      fs.mkdirSync(outputBaseDir, { recursive: true });
    }

    // L·∫•y danh s√°ch ·∫£nh overlay
    const overlayFiles = fs.readdirSync(overlayDir)
      .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file)) // L·ªçc file ·∫£nh
      .sort((a, b) => parseInt(a) - parseInt(b)); // S·∫Øp x·∫øp theo s·ªë

    console.log(`T√¨m th·∫•y ${overlayFiles.length} ·∫£nh overlay trong th∆∞ m·ª•c: ${overlayDir}`);

    // L·∫•y danh s√°ch ·∫£nh ƒë·∫ßu v√†o
    const inputFiles = fs.readdirSync(inputDir)
      .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file));

    console.log(`T√¨m th·∫•y ${inputFiles.length} ·∫£nh c·∫ßn x·ª≠ l√Ω trong th∆∞ m·ª•c: ${inputDir}`);

    for (let i = 0; i < overlayFiles.length; i++) {
      const overlayPath = path.join(overlayDir, overlayFiles[i]);
      const outputDir = path.join(outputBaseDir, `${i + 1}`); // T·∫°o folder theo s·ªë th·ª© t·ª±

      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      console.log(`S·ª≠ d·ª•ng overlay: ${overlayFiles[i]} -> L∆∞u v√†o ${outputDir}`);

      // T·∫°o overlay h√¨nh tr√≤n
      const overlayCircle = await sharp(overlayPath)
        .resize(overlaySize, overlaySize)
        .composite([{
          input: Buffer.from(
            `<svg width="${overlaySize}" height="${overlaySize}">
              <rect width="100%" height="100%" fill="none"/> 
              <circle cx="${overlaySize / 2}" cy="${overlaySize / 2}" r="${overlaySize / 2}" fill="white" stroke="white"/>
            </svg>`
          ),
          blend: "dest-in",
        }])
        .png()
        .toBuffer();

      for (const file of inputFiles) {
        const inputPath = path.join(inputDir, file);
        const outputPath = path.join(outputDir, file);

        console.log(`ƒêang x·ª≠ l√Ω: ${file} v·ªõi overlay ${overlayFiles[i]}`);

        try {
          // Bi·∫øn ƒë·ªïi m√†u v√† ch√®n overlay
          const transformedBaseImage = await sharp(inputPath)
            .modulate({ brightness: 1.1, saturation: 1.2, hue: 20 })
            .toBuffer();

          const metadata = await sharp(transformedBaseImage).metadata();
          const x = metadata.width - overlaySize - 10;
          const y = 10;

          await sharp(transformedBaseImage)
            .composite([{ input: overlayCircle, top: y, left: x }])
            .toFile(outputPath);

          console.log(`L∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω t·∫°i: ${outputPath}`);
        } catch (err) {
          console.error(`L·ªói khi x·ª≠ l√Ω file ${file}:`, err.message);
        }
      }
    }

    console.log("Qu√° tr√¨nh x·ª≠ l√Ω ho√†n t·∫•t.");
  } catch (err) {
    console.error("L·ªói khi x·ª≠ l√Ω th∆∞ m·ª•c:", err.message);
  }
}


async function main() {
  // ƒê∆∞·ªùng d·∫´n t·ªõi file ch·ª©a c√°c URL


  const filePath = "./urls.txt";
  const savePath = "./overlays"; // Th∆∞ m·ª•c l∆∞u video t·∫£i v·ªÅ
  const overlayDir = "./images"; // Th∆∞ m·ª•c ch·ª©a ·∫£nh overlay
  const outputBaseDir = "./thumbs"; // Th∆∞ m·ª•c g·ªëc l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
  const overlaySize = 125;

  // G·ªçi h√†m t·∫£i video
  await downloadVideos(filePath, savePath);
  await convertCodec(savePath);
  await processImagesFromFolder(savePath, overlayDir, outputBaseDir, overlaySize);
}

main(); // Ch·∫°y ch∆∞∆°ng tr√¨nh main() khi ch∆∞∆°ng tr√¨nh ch·∫°y ƒë·∫ßu ti√™n
